From 88f52f4b20e04acae11833ecc6361a77247c6db1 Mon Sep 17 00:00:00 2001
From: Le Blond <erwanleblond@gmail.com>
Date: Mon, 23 Jun 2025 11:30:57 +0200
Subject: [PATCH]  patch xeve_app to display params

---
 app/xeve_app.c | 124 +++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 124 insertions(+)

diff --git a/app/xeve_app.c b/app/xeve_app.c
index b8b717b..7b90d60 100644
--- a/app/xeve_app.c
+++ b/app/xeve_app.c
@@ -84,6 +84,128 @@ typedef struct _Y4M_PARAMS
     int bit_depth;
 }Y4M_INFO;
 
+#include <stdio.h>
+
+void print_xeve_param(const XEVE_PARAM *param) {
+    if (param == NULL) {
+        printf("Error: NULL parameter passed to print_xeve_param\n");
+        return;
+    }
+
+    printf("XEVE_PARAM Structure Values:\n");
+    printf("===========================\n");
+
+    /* Basic parameters */
+    printf("Profile: %d\n", param->profile);
+    printf("Threads: %d\n", param->threads);
+    printf("Width: %d\n", param->w);
+    printf("Height: %d\n", param->h);
+    printf("FPS: %d/%d\n", param->fps.num, param->fps.den);
+    printf("Keyint: %d\n", param->keyint);
+    printf("Color space: %d\n", param->cs);
+    printf("RC type: %d\n", param->rc_type);
+    printf("QP: %d\n", param->qp);
+    printf("QP CB offset: %d\n", param->qp_cb_offset);
+    printf("QP CR offset: %d\n", param->qp_cr_offset);
+    printf("Bitrate: %d kbps\n", param->bitrate);
+    printf("VBV bufsize: %d kbits\n", param->vbv_bufsize);
+    printf("CRF: %d\n", param->crf);
+    printf("B-frames: %d\n", param->bframes);
+    printf("AQ mode: %d\n", param->aq_mode);
+    printf("Lookahead: %d\n", param->lookahead);
+    printf("Closed GOP: %d\n", param->closed_gop);
+    printf("Use Annex-B: %d\n", param->use_annexb);
+    printf("Use filler: %d\n", param->use_filler);
+    
+    /* Chroma QP table */
+    printf("Chroma QP table present: %d\n", param->chroma_qp_table_present_flag);
+    // Note: The arrays are too large to print completely - you might want to print just a few elements
+    
+    /* Coding tools */
+    printf("Disable HGOP: %d\n", param->disable_hgop);
+    printf("Ref pic gap length: %d\n", param->ref_pic_gap_length);
+    printf("Codec bit depth: %d\n", param->codec_bit_depth);
+    printf("Level IDC: %d\n", param->level_idc);
+    printf("Cutree: %d\n", param->cutree);
+    printf("Constrained intra pred: %d\n", param->constrained_intra_pred);
+    printf("Use deblock: %d\n", param->use_deblock);
+    printf("Inter slice type: %d\n", param->inter_slice_type);
+    
+    /* Picture cropping */
+    printf("Picture cropping flag: %d\n", param->picture_cropping_flag);
+    if (param->picture_cropping_flag) {
+        printf("  Crop left: %d\n", param->picture_crop_left_offset);
+        printf("  Crop right: %d\n", param->picture_crop_right_offset);
+        printf("  Crop top: %d\n", param->picture_crop_top_offset);
+        printf("  Crop bottom: %d\n", param->picture_crop_bottom_offset);
+    }
+    
+    /* More parameters */
+    printf("RDO DBK switch: %d\n", param->rdo_dbk_switch);
+    printf("QP increase frame: %d\n", param->qp_incread_frame);
+    printf("SEI CMD info: %d\n", param->sei_cmd_info);
+    printf("Use pic sign: %d\n", param->use_pic_sign);
+    printf("F I-frame: %d\n", param->f_ifrm);
+    printf("QP max: %d\n", param->qp_max);
+    printf("QP min: %d\n", param->qp_min);
+    printf("GOP size: %d\n", param->gop_size);
+    printf("Force output: %d\n", param->force_output);
+    printf("Use FCST: %d\n", param->use_fcst);
+    printf("Chroma format IDC: %d\n", param->chroma_format_idc);
+    printf("CS width shift: %d\n", param->cs_w_shift);
+    printf("CS height shift: %d\n", param->cs_h_shift);
+    
+    /* CU settings */
+    printf("Max CU intra: %d\n", param->max_cu_intra);
+    printf("Min CU intra: %d\n", param->min_cu_intra);
+    printf("Max CU inter: %d\n", param->max_cu_inter);
+    printf("Min CU inter: %d\n", param->min_cu_inter);
+    
+    /* Motion estimation */
+    printf("Ref frames: %d\n", param->ref);
+    printf("ME ref num: %d\n", param->me_ref_num);
+    printf("ME algorithm: %d\n", param->me_algo);
+    printf("ME range: %d\n", param->me_range);
+    printf("ME sub: %d\n", param->me_sub);
+    printf("ME sub pos: %d\n", param->me_sub_pos);
+    printf("ME sub range: %d\n", param->me_sub_range);
+    printf("Skip threshold: %f\n", param->skip_th);
+    printf("Merge num: %d\n", param->merge_num);
+    printf("RDOQ: %d\n", param->rdoq);
+    printf("CABAC refine: %d\n", param->cabac_refine);
+    
+    /* Main Profile Parameters */
+    printf("IBC flag: %d\n", param->ibc_flag);
+    printf("IBC search range X: %d\n", param->ibc_search_range_x);
+    printf("IBC search range Y: %d\n", param->ibc_search_range_y);
+    printf("IBC hash search flag: %d\n", param->ibc_hash_search_flag);
+    printf("IBC hash search max cand: %d\n", param->ibc_hash_search_max_cand);
+    printf("IBC hash search range for small blocks: %d\n", param->ibc_hash_search_range_4smallblk);
+    printf("IBC fast method: %d\n", param->ibc_fast_method);
+    
+    /* Toolset and framework */
+    printf("Toolset IDC H: %d\n", param->toolset_idc_h);
+    printf("Toolset IDC L: %d\n", param->toolset_idc_l);
+    printf("BTT: %d\n", param->btt);
+    printf("SUCO: %d\n", param->suco);
+    
+    /* VUI parameters */
+    printf("SAR: %d\n", param->sar);
+    printf("SAR width: %d, SAR height: %d\n", param->sar_width, param->sar_height);
+    printf("Video format: %d\n", param->videoformat);
+    printf("Range: %d\n", param->range);
+    printf("Color primaries: %d\n", param->colorprim);
+    printf("Transfer characteristics: %d\n", param->transfer);
+    printf("Matrix coefficients: %d\n", param->matrix_coefficients);
+    
+    /* SEI options */
+    printf("Master display: %d\n", param->master_display);
+    printf("Max CLL: %d\n", param->max_cll);
+    printf("Max FALL: %d\n", param->max_fall);
+    
+    printf("===========================\n");
+}
+
 static inline int y4m_is_regular_file( FILE *filehandle )
 {
     y4m_struct_stat file_stat;
@@ -1164,6 +1286,8 @@ int main(int argc, const char **argv)
         ret = -1; goto ERR;
     }
 
+    print_xeve_param(&cdsc.param);
+
     /* create encoder */
     id = xeve_create(&cdsc, NULL);
     if (id == NULL)
-- 
2.34.1

